(define (domain dominio_definitivo)

(:requirements :adl :derived-predicates :strips :typing :conditional-effects :negative-preconditions :equality)

(:types
    entity
    place - entity
    thing - entity 
    agent 
    id
)


(:predicates 
        (disjuncted ?a ?b - entity)
        (disjuncted_a ?a ?b - agent)
        (disjuncted_r ?a ?b - place)
        (disjuncted_id ?x1 ?x2 - id)     
        (Know ?x1 - id ?ag - agent ?x2 - id)
        (Ignore ?x1 - id ?ag - agent ?x2 - id)
        (isTold ?x1 - id ?ag - agent ?x2 - id)
        (isStart ?x - id)
        (isEnd ?x - id)
        (isIn ?x1 - id ?e - entity ?p - entity)
        (isAt ?x1 - id ?ag - agent ?p - place) 
        (free ?x - id)
        (insulted ?x1 - id ?ag1 ?ag2 - agent)
        (praised ?x1 - id ?ag2 ?ag1 - agent)
        (blamed ?x1 - id ?ag1 - agent ?x2 - id ?ag2 - agent)
        (givenCredit ?x1 - id ?ag1 - agent ?x2 - id ?ag2 - agent)
        (Willing ?x1 - id ?ag1 - agent ?x2 - id)
        (NotSureIfWilling ?x1 - id ?ag1 - agent ?x2 - id)
        (Desire ?x1 - id ?ag - agent ?x2 - id)
        (isEcstasy_joy_serenity ?x1 - id ?ag1 - agent ?x2 - id)
        (isGrief_sadness_pensiveness ?x1 - id ?ag1 - agent ?x2 - id)
        (isRage_anger_annoyance ?x1 - id ?ag1 - agent ?x2 - id)
        (isTerror_fear_apprehension ?x1 - id ?ag1 - agent ?x2 - id)
        (isAmazement_surprise_distraction ?x1 - id ?ag1 - agent ?x2 - id)
        (isLoathing_disgust_boredom ?x1 - id ?ag1 - agent ?x2 - id)
        (isSadic ?ag - agent)
        (isNarcissist ?ag - agent)
        (isPsychopath ?ag - agent)
        (isDependent ?ag2 ?ag1 - agent)
        (isEmpathic ?ag - agent)
        (isNeutral ?ag - agent)
        (ok1)
        (ok2)
        (ok3)
        (ok4)
        (ok5)
        (ok6)
        (ok7)
        (ok8)
        (ok9)
        (ok10)
        (ok11)
)

(:derived (isEcstasy_joy_serenity ?x3 - id ?ag2 - agent ?x1 - id)
        (exists(?x2 ?x4 - id ?ag1 - agent)
            (and
                (isTold ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x1)
                (Know ?x4 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x4)
                (isStart ?x3)
                (isStart ?x2)
                (isEmpathic ?ag2)
            )
        )
)

(:derived (isRage_anger_annoyance ?x3 - id ?ag2 - agent ?x1 - id)
        (exists(?x2 ?x4 - id ?ag1 - agent)
            (and
                (isTold ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x1)
                (Know ?x4 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x4)
                (isStart ?x3)
                (isStart ?x2)
                (isNarcissist ?ag2)
            )
        )
)

(:derived (isAmazement_surprise_distraction ?x3 - id ?ag2 - agent ?x1 - id)
        (exists(?x2 ?x4 - id ?ag1 - agent)
            (and
                (isTold ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x1)
                (Know ?x4 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x4)
                (isStart ?x3)
                (isStart ?x2)
                (isDependent ?ag2 ?ag1)
            )
        )
)

(:derived (isEcstasy_joy_serenity ?x3 - id ?ag2 - agent ?x1 - id)
        (exists(?x2 - id ?ag1 - agent)
            (and
                (isTold ?x3 ?ag2 ?x1)
                (Know ?x2 ?ag1 ?x1)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (isDependent ?ag2 ?ag1)
            )
        )
)

 (:derived (isGrief_sadness_pensiveness ?x3 - id ?ag2 - agent ?x1 - id)
         (exists(?x2 - id ?ag1 - agent)
             (and
                (isTold ?x3 ?ag2 ?x1)
                (Know ?x2 ?ag1 ?x1)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
		        (or 
                    (isNeutral ?ag2)
                    (isEmpathic ?ag2)
                )
             )
         )
 )

(:derived (isRage_anger_annoyance ?x3 - id ?ag2 - agent ?x1 - id)
        (exists(?x2 - id ?ag1 - agent)
            (and
                (isTold ?x3 ?ag2 ?x1)
                (Know ?x2 ?ag1 ?x1)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)                 
                (isNarcissist ?ag2)                
            )
        )
)

(:derived (isAmazement_surprise_distraction ?x3 - id ?ag2 - agent ?x1 - id)
        (exists(?x2 - id ?ag1 - agent)
            (and
                (isTold ?x3 ?ag2 ?x1)
                (Know ?x2 ?ag1 ?x1)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (or 
                    (isNarcissist ?ag2)
                    (isPsychopath ?ag2)
                    (isEmpathic ?ag2)
                    (isNeutral ?ag2)
                )
            )
        )
)

(:derived (isEcstasy_joy_serenity ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?ag1 - agent)
            (and
                (insulted ?x1 ?ag1 ?ag2)
                (isStart ?x1)
                (isEnd ?x2)
                (isSadic ?ag2)
            )
        )   
)

(:derived (isGrief_sadness_pensiveness ?x1 - id ?ag2 - agent ?x2 - id)
       (exists (?ag1 - agent)
            (and
                (insulted ?x1 ?ag1 ?ag2)
                (isStart ?x1)
                (isEnd ?x2)
                (or 
                    (isEmpathic ?ag2)
                    (isNeutral ?ag2)
                )
            )
        )     
)

(:derived (isTerror_fear_apprehension ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?ag1 - agent)
            (and
                (insulted ?x1 ?ag1 ?ag2)
                (isStart ?x1)
                (isEnd ?x2)
                (isDependent ?ag2 ?ag1)
            )
        )   
)

(:derived (isEcstasy_joy_serenity ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?ag1 - agent)
            (and
                (praised ?x1 ?ag1 ?ag2)
                (isStart ?x1)
                (isEnd ?x2)
                (or 
                    (isEmpathic ?ag2)
                    (isDependent ?ag2 ?ag1)
                    (isNeutral ?ag2)
                )
            )
        )   
)

(:derived (isEcstasy_joy_serenity ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?ag1 - agent)
            (and
                (blamed ?x1 ?ag1 ?x2 ?ag2)
                (isStart ?x1)
                (isSadic ?ag2)
            )
        )   
)

(:derived (isGrief_sadness_pensiveness ?x1 - id ?ag2 - agent ?x2 - id)
       (exists (?ag1 - agent)
            (and
                (blamed ?x1 ?ag1 ?x2 ?ag2)
                (isStart ?x1)
                (isEmpathic ?ag2)
            )
        )   
)

(:derived (isTerror_fear_apprehension ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?ag1 - agent)
            (and
                (blamed ?x1 ?ag1 ?x2 ?ag2)
                (isStart ?x1)
                (isDependent ?ag2 ?ag1)
            )
        ) 
)

(:derived (isEcstasy_joy_serenity ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?ag1 - agent)
            (and
                (givenCredit ?x1 ?ag1 ?x2 ?ag2)
                (isStart ?x1)
                (or 
                    (isEmpathic ?ag2)
                    (isDependent ?ag2 ?ag1)
                    (isNeutral ?ag2)
                )
            )
        )   
)

(:derived (isEcstasy_joy_serenity ?x2 - id ?ag2 - agent ?x1 - id)
        (exists (?ag1 ?ag - agent)
            (and
                (insulted ?x1 ?ag1 ?ag)
                (Know ?x2 ?ag2 ?x1)
                (isStart ?x1)
                (isStart ?x2)
                (disjuncted_a ?ag2 ?ag)
                (disjuncted_a ?ag2 ?ag1)
                (isSadic ?ag2)
            )
        )    
)

(:derived (isGrief_sadness_pensiveness ?x2 - id ?ag2 - agent ?x1 - id)
        (exists (?ag1 ?ag - agent)
            (and
                (insulted ?x1 ?ag1 ?ag)
                (Know ?x2 ?ag2 ?x1)
                (isStart ?x1)
                (isStart ?x2)
                (disjuncted_a ?ag2 ?ag)
                (disjuncted_a ?ag2 ?ag1)
                (or 
                    (isEmpathic ?ag2)
                    (isDependent ?ag2 ?ag1)
                )
            )
        )    
)

(:derived (isRage_anger_annoyance ?x2 - id ?ag2 - agent ?x1 - id)
        (exists (?ag1 ?ag - agent)
            (and
                (insulted ?x1 ?ag1 ?ag)
                (Know ?x2 ?ag2 ?x1)
                (isStart ?x1)
                (isStart ?x2)
                (disjuncted_a ?ag2 ?ag)
                (disjuncted_a ?ag2 ?ag1)
                (or 
                    (isEmpathic ?ag2)
                    (isNeutral ?ag2)
                )
            )
        )    
)

(:derived (isTerror_fear_apprehension ?x2 - id ?ag2 - agent ?x1 - id)
        (exists (?ag1 ?ag - agent)
            (and
                (insulted ?x1 ?ag1 ?ag)
                (Know ?x2 ?ag2 ?x1)
                (isStart ?x1)
                (isStart ?x2)
                (disjuncted_a ?ag2 ?ag)
                (disjuncted_a ?ag2 ?ag1)
                (isDependent ?ag2 ?ag1)
            )
        )    
)

(:derived (isEcstasy_joy_serenity ?x2 - id ?ag2 - agent ?x1 - id)
        (exists (?ag1 ?ag - agent)
            (and
                (praised ?x1 ?ag1 ?ag)
                (Know ?x2 ?ag2 ?x1)
                (isStart ?x1)
                (isStart ?x2)
                (disjuncted_a ?ag2 ?ag)
                (disjuncted_a ?ag2 ?ag1)
                (or 
                    (isEmpathic ?ag2)
                    (isDependent ?ag2 ?ag1)
                )
            )
        )    
)

(:derived (isRage_anger_annoyance ?x2 - id ?ag2 - agent ?x1 - id)
        (exists (?ag1 ?ag - agent)
            (and
                (praised ?x1 ?ag1 ?ag)
                (Know ?x2 ?ag2 ?x1)
                (isStart ?x1)
                (isStart ?x2)
                (disjuncted_a ?ag2 ?ag)
                (disjuncted_a ?ag2 ?ag1)
                (or 
                    (isSadic ?ag2)
                    (isNarcissist ?ag2)
                )
            )
        )    
)

(:derived (isEcstasy_joy_serenity ?x2 - id ?ag2 - agent ?x1 - id)
        (exists (?ag1 ?ag - agent ?x3 - id)
            (and
                (blamed ?x1 ?ag1 ?x3 ?ag)
                (Know ?x2 ?ag2 ?x1)
                (isStart ?x1)
                (isStart ?x2)
                (disjuncted_a ?ag2 ?ag)
                (disjuncted_a ?ag2 ?ag1)
                (isSadic ?ag2)
            )
        )    
)

(:derived (isGrief_sadness_pensiveness ?x2 - id ?ag2 - agent ?x1 - id)
        (exists (?ag1 ?ag - agent ?x3 - id)
            (and
                (blamed ?x1 ?ag1 ?x3 ?ag)
                (Know ?x2 ?ag2 ?x1)
                (isStart ?x1)
                (isStart ?x2)
                (disjuncted_a ?ag2 ?ag)
                (disjuncted_a ?ag2 ?ag1)
                (or 
                    (isEmpathic ?ag2)
                    (isDependent ?ag2 ?ag1)
                )
            )
        )    
)

(:derived (isTerror_fear_apprehension ?x2 - id ?ag2 - agent ?x1 - id)
        (exists (?ag1 ?ag - agent ?x3 - id)
            (and
                (blamed ?x1 ?ag1 ?x3 ?ag)
                (Know ?x2 ?ag2 ?x1)
                (isStart ?x1)
                (isStart ?x2)
                (disjuncted_a ?ag2 ?ag)
                (disjuncted_a ?ag2 ?ag1)
                (isDependent ?ag2 ?ag1)
            )
        ) 
)

(:derived (isAmazement_surprise_distraction ?x2 - id ?ag2 - agent ?x1 - id)
        (exists (?ag1 ?ag - agent ?x3 - id)
            (and
                (blamed ?x1 ?ag1 ?x3 ?ag)
                (Know ?x2 ?ag2 ?x1)
                (isStart ?x1)
                (isStart ?x2)
                (disjuncted_a ?ag2 ?ag)
                (disjuncted_a ?ag2 ?ag1)
                (isEmpathic ?ag2)
            )
        ) 
)

(:derived (isEcstasy_joy_serenity ?x2 - id ?ag2 - agent ?x1 - id)
        (exists (?ag1 ?ag - agent ?x3 - id)
            (and
                (givenCredit ?x1 ?ag1 ?x3 ?ag)
                (Know ?x2 ?ag2 ?x1)
                (isStart ?x1)
                (isStart ?x2)
                (disjuncted_a ?ag2 ?ag)
                (disjuncted_a ?ag2 ?ag1)
                (or 
                    (isEmpathic ?ag2)
                    (isDependent ?ag2 ?ag1)
                )
            )
        )    
)

(:derived (isRage_anger_annoyance ?x2 - id ?ag2 - agent ?x1 - id)
        (exists (?ag1 ?ag - agent ?x3 - id)
            (and
                (givenCredit ?x1 ?ag1 ?x3 ?ag)
                (Know ?x2 ?ag2 ?x1)
                (isStart ?x1)
                (isStart ?x2)
                (disjuncted_a ?ag2 ?ag)
                (disjuncted_a ?ag2 ?ag1)
                (isNarcissist ?ag2)
            )
        )  
)

(:derived (isEcstasy_joy_serenity ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isEcstasy_joy_serenity ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (or 
                    (isEmpathic ?ag2)
                    (isDependent ?ag2 ?ag1)
                )
            )
        )
)

(:derived (isGrief_sadness_pensiveness ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isEcstasy_joy_serenity ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (isSadic ?ag2)
            )
        )
)

(:derived (isRage_anger_annoyance ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isEcstasy_joy_serenity ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (or 
                    (isSadic ?ag2)
                    (isNarcissist ?ag2)
                )
            )
        )
)

(:derived (isEcstasy_joy_serenity ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isGrief_sadness_pensiveness ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (isSadic ?ag2)
            )
        )
)

(:derived (isGrief_sadness_pensiveness ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isGrief_sadness_pensiveness ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (or 
                    (isEmpathic ?ag2)
                    (isDependent ?ag2 ?ag1)
                )
            )
        )
)

(:derived (isTerror_fear_apprehension ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isGrief_sadness_pensiveness ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (isDependent ?ag2 ?ag1)
            )
        )
)

(:derived (isLoathing_disgust_boredom ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isGrief_sadness_pensiveness ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (isNarcissist ?ag2)
            )
        )
)

(:derived (isGrief_sadness_pensiveness ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isRage_anger_annoyance ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (isEmpathic ?ag2)
            )
        )
)

(:derived (isRage_anger_annoyance ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isRage_anger_annoyance ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (or 
                    (isNarcissist ?ag2)
                    (isNeutral ?ag2)
                )
            )
        )
)

(:derived (isTerror_fear_apprehension ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isRage_anger_annoyance ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (or 
                    (isSadic ?ag2)
                    (isDependent ?ag2 ?ag1)
                )
            )
        )
)

(:derived (isEcstasy_joy_serenity ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isTerror_fear_apprehension ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (isSadic ?ag2)
            )
        )
)

(:derived (isTerror_fear_apprehension ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isTerror_fear_apprehension ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (or
                    (isDependent ?ag2 ?ag1)
                    (isEmpathic ?ag2)
                )
            )
        )
)

(:derived (isAmazement_surprise_distraction ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isTerror_fear_apprehension ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (or 
                    (isEmpathic ?ag2)
                    (isDependent ?ag2 ?ag1)
                )
            )
        )
)

(:derived (isLoathing_disgust_boredom ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isTerror_fear_apprehension ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (isNarcissist ?ag2)
            )
        )
)





(:derived (isEcstasy_joy_serenity ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isAmazement_surprise_distraction ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (isSadic ?ag2)
            )
        )
)

(:derived (isAmazement_surprise_distraction ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isAmazement_surprise_distraction ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (isDependent ?ag2 ?ag1)
            )
        )
)

(:derived (isEcstasy_joy_serenity ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isLoathing_disgust_boredom ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (isSadic ?ag2)
            )
        )
)

(:derived (isGrief_sadness_pensiveness ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isLoathing_disgust_boredom ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (or 
                    (isEmpathic ?ag2)
                    (isDependent ?ag2 ?ag1)
                )
            )
        )
)

(:derived (isLoathing_disgust_boredom ?x3 - id ?ag2 - agent ?x2 - id)
        (exists(?x1 - id ?ag1 - agent)
            (and
                (isLoathing_disgust_boredom ?x2 ?ag1 ?x1)
                (Know ?x3 ?ag2 ?x2)
                (disjuncted_a ?ag1 ?ag2)
                (isStart ?x3)
                (isStart ?x2)
                (isNarcissist ?ag2)
            )
        )
)

(:derived (isEcstasy_joy_serenity ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?x3 - id ?ag - agent)
            (and
                (insulted ?x1 ?ag2 ?ag)
                (isStart ?x1)
                (isEnd ?x2)
		        (Know ?x3 ?ag2 ?x1)
		        (isStart ?x3)
                (isSadic ?ag2)
            )
        )   
)

(:derived (isGrief_sadness_pensiveness ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?x3 - id ?ag - agent)
            (and
                (insulted ?x1 ?ag2 ?ag)
                (isStart ?x1)
                (isEnd ?x2)
		        (Know ?x3 ?ag2 ?x1)
		        (isStart ?x3)                
                (isEmpathic ?ag2)               
            )
        )   
)

(:derived (isGrief_sadness_pensiveness ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?x3 - id ?ag - agent)
            (and
                (insulted ?x1 ?ag2 ?ag1)
                (isStart ?x1)
                (isEnd ?x2)
		        (Know ?x3 ?ag2 ?x1)
		        (isStart ?x3)
                (isDependent ?ag2 ?ag1)
            )
        )   
)

(:derived (isRage_anger_annoyance ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?x3 - id ?ag - agent)
            (and
                (insulted ?x1 ?ag2 ?ag)
                (isStart ?x1)
                (isEnd ?x2)
		        (Know ?x3 ?ag2 ?x1)
		        (isStart ?x3)
                (or 
                    (isPsychopath ?ag2)
                    (isEmpathic ?ag2)
                    (isNeutral ?ag2)
                    (isNarcissist ?ag2)
                )
            )
        )   
)

(:derived (isTerror_fear_apprehension ?x1 - id ?ag2 - agent ?x2 - id)
       (exists (?x3 - id ?ag - agent)
            (and
                (insulted ?x1 ?ag2 ?ag)
                (isStart ?x1)
                (isEnd ?x2)
		        (Know ?x3 ?ag2 ?x1)
		        (isStart ?x3)
                (isNarcissist ?ag2)
            )
        )   
)

(:derived (isAmazement_surprise_distraction ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?x3 - id ?ag - agent)
            (and
                (insulted ?x1 ?ag2 ?ag1)
                (isStart ?x1)
                (isEnd ?x2)
		        (Know ?x3 ?ag2 ?x1)
		        (isStart ?x3)
                (isDependent ?ag2 ?ag1)
            )
        )   
)

(:derived (isEcstasy_joy_serenity ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?x3 - id ?ag - agent)
            (and
                (praised ?x1 ?ag2 ?ag)
                (isStart ?x1)
                (isEnd ?x2)
		        (Know ?x3 ?ag2 ?x1)
		        (isStart ?x3)
                (or 
                    (isEmpathic ?ag2)
                    (isNeutral ?ag2)
                    (isNarcissist ?ag2)
                )
            )
        )   
)

(:derived (isEcstasy_joy_serenity ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?x3 - id ?ag - agent)
            (and
                (praised ?x1 ?ag2 ?ag1)
                (isStart ?x1)
                (isEnd ?x2)
		        (Know ?x3 ?ag2 ?x1)
		        (isStart ?x3)
                (isDependent ?ag2 ?ag1)
            )
        )   
)

(:derived (isAmazement_surprise_distraction ?x1 - id ?ag2 - agent ?x2 - id)
        (exists (?x3 - id ?ag - agent)
            (and
                (praised ?x1 ?ag2 ?ag)
                (isStart ?x1)
                (isEnd ?x2)
		        (Know ?x3 ?ag2 ?x1)
		        (isStart ?x3)
                (isSadic ?ag2)
            )
        )   
)

(:derived (isEcstasy_joy_serenity ?x1 - id ?ag2 - agent ?x3 - id)
        (exists (?x4 - id ?ag - agent)
            (and
                (blamed ?x1 ?ag2 ?x3 ?ag)
                (isStart ?x1)
		        (Know ?x4 ?ag2 ?x1)
		        (isStart ?x4)
                (isSadic ?ag2)
            )
        )   
)

(:derived (isGrief_sadness_pensiveness ?x1 - id ?ag2 - agent ?x3 - id)
        (exists (?x4 - id ?ag - agent)
            (and
                (blamed ?x1 ?ag2 ?x3 ?ag)
                (isStart ?x1)
		        (Know ?x4 ?ag2 ?x1)
		        (isStart ?x4)
                (or 
                    (isEmpathic ?ag2)
                    (isNeutral ?ag2)
                )
            )
        )     
)

(:derived (isGrief_sadness_pensiveness ?x1 - id ?ag2 - agent ?x3 - id)
        (exists (?x4 - id ?ag - agent)
            (and
                (blamed ?x1 ?ag2 ?x3 ?ag1)
                (isStart ?x1)
		        (Know ?x4 ?ag2 ?x1)
		        (isStart ?x4)
                (isDependent ?ag2 ?ag1)
            )
        )     
)

(:derived (isRage_anger_annoyance ?x1 - id ?ag2 - agent ?x3 - id)
        (exists (?x4 - id ?ag - agent)
            (and
                (blamed ?x1 ?ag2 ?x3 ?ag)
                (isStart ?x1)
		        (Know ?x4 ?ag2 ?x1)
		        (isStart ?x4)               
                (isNarcissist ?ag2)               
            )
        )    
)

(:derived (isTerror_fear_apprehension ?x1 - id ?ag2 - agent ?x3 - id)
       (exists (?x4 - id ?ag - agent)
            (and
                (blamed ?x1 ?ag2 ?x3 ?ag)
                (isStart ?x1)
		        (Know ?x4 ?ag2 ?x1)
		        (isStart ?x4)
                (isNarcissist ?ag2)
            )
        )    
)

(:derived (isAmazement_surprise_distraction ?x1 - id ?ag2 - agent ?x3 - id)
        (exists (?x4 - id ?ag - agent)
            (and
                (blamed ?x1 ?ag2 ?x3 ?ag1)
                (isStart ?x1)
		        (Know ?x4 ?ag2 ?x1)
		        (isStart ?x4)
                (isDependent ?ag2 ?ag1)
            )
        )   
)

(:derived (isEcstasy_joy_serenity ?x1 - id ?ag2 - agent ?x3 - id)
        (exists (?x4 - id ?ag - agent)
            (and
                (givenCredit ?x1 ?ag2 ?x3 ?ag)
                (isStart ?x1)
		        (Know ?x4 ?ag2 ?x1)
		        (isStart ?x4)
                (or 
                    (isEmpathic ?ag2)
                    (isNeutral ?ag2)
                    (isNarcissist ?ag2)
                )
            )
        )   
)

(:derived (isEcstasy_joy_serenity ?x1 - id ?ag2 - agent ?x3 - id)
        (exists (?x4 - id ?ag - agent)
            (and
                (givenCredit ?x1 ?ag2 ?x3 ?ag1)
                (isStart ?x1)
		        (Know ?x4 ?ag2 ?x1)
		        (isStart ?x4)
                (isDependent ?ag2 ?ag1)
            )
        )   
)

(:derived (isAmazement_surprise_distraction ?x1 - id ?ag2 - agent ?x3 - id)
        (exists (?x4 - id ?ag - agent)
            (and
                (givenCredit ?x1 ?ag2 ?x3 ?ag)
                (isStart ?x1)
		        (Know ?x4 ?ag2 ?x1)
		        (isStart ?x4)
                (isSadic ?ag2)
            )
        )   
)

(:derived (isEcstasy_joy_serenity ?x2 - id ?ag - agent ?g - id)
        (exists (?x1 ?x3 - id ?o ?r - entity)
            (and
                (isIn ?x1 ?o ?r)
		        (Know ?x3 ?ag ?x1)
                (isStart ?x3)
                (Desire ?x2 ?ag ?g)
                (isIn ?g ?o ?r)
            )
        )   
)

(:derived (isEcstasy_joy_serenity ?x2 - id ?ag1 - agent ?g - id)
        (exists (?x1 ?x3 - id ?ag2 - agent ?r - entity)
            (and
                (isAt ?x1 ?ag2 ?r)
		        (Know ?x3 ?ag1 ?x1)
                (isStart ?x3)
                (Desire ?x2 ?ag1 ?g)
                (isAt ?g ?ag2 ?r)
            )
        )   
)

(:action Ask_Put_Alone
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 ?x8 ?x9 ?x10 - id ?ag1 ?ag2 - agent ?r1 ?r2 ?p ?box ?o - entity)
    :precondition (and 
            (isAt ?x1 robot ?r1)
            (isStart ?x1)
            (isAt ?x2 ?ag1 ?r1)
            (isStart ?x2)
            (isAt ?x3 ?ag2 ?r2)
            (isStart ?x3)
            (isIn ?x4 ?o ?p)
            (isStart ?x4)
            (Know ?x5 ?ag1 ?x4)
            (Know ?x6 ?ag2 ?x4)
            (isStart ?x5)
            (isStart ?x6)
            (Willing ?x10 ?ag1 ?x4)
            (disjuncted_r ?r1 ?r2)
            (disjuncted ?p ?box)
            (disjuncted ?o ?box)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_a robot ?ag2) 
            (free ?x7)
            (free ?x8)
            (free ?x9)
            (disjuncted_id ?x7 ?x8)
            (disjuncted_id ?x8 ?x9)
            (disjuncted_id ?x7 ?x9)
    )
    :effect (and 
            (not (isIn ?x4 ?o ?p))
            (not (Know ?x6 ?ag2 ?x4))
            (isIn ?x4 ?o ?box)
            (Ignore ?x6 ?ag2 ?x4)           
            (isIn ?x7 ?o ?p)
            (Know ?x8 ?ag2 ?x7)
            (isStart ?x8)
            (Ignore ?x9 ?ag1 ?x7)
            (isStart ?x9)
            (not (free ?x7))
            (not (free ?x8))
            (not (free ?x9))
    );end_effect
)

(:action Ask_Put_Alone_Manipulative
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 ?x8 ?x9 ?x10 - id ?ag1 ?ag2 - agent ?r1 ?r2 ?p ?box ?o - entity)
    :precondition (and 
            (isAt ?x1 robot ?r1)
            (isStart ?x1)
            (isAt ?x2 ?ag1 ?r1)
            (isStart ?x2)
            (isAt ?x3 ?ag2 ?r2)
            (isStart ?x3)
            (isIn ?x4 ?o ?p)
            (isStart ?x4)
            (Know ?x5 ?ag1 ?x4)
            (Know ?x6 ?ag2 ?x4)
            (isStart ?x5)
            (isStart ?x6)
            (NotSureIfWilling ?x10 ?ag1 ?x4)
            (disjuncted_r ?r1 ?r2)
            (disjuncted ?p ?box)
            (disjuncted ?o ?box)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_a robot ?ag2)
            (free ?x7)
            (free ?x8)
            (free ?x9)
            (disjuncted_id ?x7 ?x8)
            (disjuncted_id ?x8 ?x9)
            (disjuncted_id ?x7 ?x9)
    )
    :effect (and 
            (not (isIn ?x4 ?o ?p))
            (isIn ?x4 ?o ?box)
            (not (Know ?x6 ?ag2 ?x4))
            (Ignore ?x6 ?ag2 ?x4)
            (isIn ?x7 ?o ?p)
            (Know ?x8 ?ag2 ?x7)
            (isStart ?x8)
            (Ignore ?x9 ?ag1 ?x7)
            (isStart ?x9)
            (not (free ?x7))
            (not (free ?x8))
            (not (free ?x9))
    );end_effect
)

(:action Ask_Put_inFrontOf
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 - id ?ag1 ?ag2 - agent ?p ?r ?box ?o - entity)
    :precondition (and 
            (isAt ?x1 robot ?r)
            (isStart ?x1)
            (isAt ?x2 ?ag1 ?r)
            (isStart ?x2)
            (isAt ?x3 ?ag2 ?r)
            (isStart ?x3)
            (isIn ?x4 ?o ?p)
            (isStart ?x4)
            (Know ?x5 ?ag1 ?x4)
            (Know ?x6 ?ag2 ?x4)
            (isStart ?x5)
            (isStart ?x6)
            (Willing ?x7 ?ag1 ?x4)
            (disjuncted ?p ?box)
            (disjuncted ?o ?box)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_a robot ?ag2)
    )
    :effect (and 
            (not (isIn ?x4 ?o ?p))
            (isIn ?x4 ?o ?box)
    );end_effect
)

(:action Ask_Put_inFrontOf_Manipulative
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 - id ?ag1 ?ag2 - agent ?p ?r ?box ?o - entity)
    :precondition (and 
            (isAt ?x1 robot ?r)
            (isStart ?x1)
            (isAt ?x2 ?ag1 ?r)
            (isStart ?x2)
            (isAt ?x3 ?ag2 ?r)
            (isStart ?x3)
            (isIn ?x4 ?o ?p)
            (isStart ?x4)
            (Know ?x5 ?ag1 ?x4)
            (Know ?x6 ?ag2 ?x4)
            (isStart ?x5)
            (isStart ?x6)
            (NotSureIfWilling ?x7 ?ag1 ?x4)
            (disjuncted ?p ?box)
            (disjuncted ?o ?box)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_a robot ?ag2)
    )
    :effect (and 
            (not (isIn ?x4 ?o ?p))
            (isIn ?x4 ?o ?box)
    );end_effect
)

(:action Ask_Go
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag1 ?ag2 - agent ?r1 ?r2 ?r3 - entity)
    :precondition (and 
            (isAt ?x1 robot ?r1)
            (isStart ?x1)
            (isAt ?x2 ?ag1 ?r1)
            (isStart ?x2)
            (isAt ?x3 ?ag2 ?r3) 
            (isStart ?x3)
            (Know ?x4 ?ag1 ?x2)
            (Know ?x5 ?ag2 ?x2)
            (isStart ?x4)
            (isStart ?x5)
            (Willing ?x6 ?ag1 ?x2)
            (disjuncted_r ?r1 ?r2)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_a robot ?ag2)
    )
    :effect (and 
            (not (isAt ?x2 ?ag1 ?r1))
            (isAt ?x2 ?ag1 ?r2)
    );end_effect
)

(:action Ask_Go_Manipulative
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag1 ?ag2 - agent ?r1 ?r2 ?r3 - entity)
    :precondition (and 
            (isAt ?x1 robot ?r1)
            (isStart ?x1)
            (isAt ?x2 ?ag1 ?r1)
            (isStart ?x2)
            (isAt ?x3 ?ag2 ?r3)
            (isStart ?x3)
            (Know ?x4 ?ag1 ?x2)
            (Know ?x5 ?ag2 ?x2)
            (isStart ?x4)
            (isStart ?x5)
            (NotSureIfWilling ?x6 ?ag1 ?x2)
            (disjuncted_r ?r1 ?r2)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_a robot ?ag2)
    )
    :effect (and 
            (not (isAt ?x2 ?ag1 ?r1))
            (isAt ?x2 ?ag1 ?r2)
    );end_effect
)

(:action Ask_Comeback
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag1 ?ag2 - agent ?r1 ?r2 ?r3 - entity)
    :precondition (and 
            (isAt ?x1 robot ?r1)
            (isStart ?x1)
            (isAt ?x2 ?ag1 ?r2)
            (isStart ?x2)
            (isAt ?x3 ?ag2 ?r3) 
            (isStart ?x3)
            (Know ?x4 ?ag1 ?x2)
            (Know ?x5 ?ag2 ?x2)
            (isStart ?x4)
            (isStart ?x5)
            (Willing ?x6 ?ag1 ?x2)
            (disjuncted_r ?r1 ?r2)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_a robot ?ag2)
    )
    :effect (and 
            (not (isAt ?x2 ?ag1 ?r2))
            (isAt ?x2 ?ag1 ?r1)
    );end_effect
)

(:action Ask_Comeback_Manipulative
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag1 ?ag2 - agent ?r1 ?r2 ?r3 - entity)
    :precondition (and 
            (isAt ?x1 robot ?r1)
            (isStart ?x1)
            (isAt ?x2 ?ag1 ?r2)
            (isStart ?x2)
            (isAt ?x3 ?ag2 ?r3)
            (isStart ?x3)
            (Know ?x4 ?ag1 ?x2)
            (Know ?x5 ?ag2 ?x2)
            (isStart ?x4)
            (isStart ?x5)
            (NotSureIfWilling ?x6 ?ag1 ?x2)
            (disjuncted_r ?r1 ?r2)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_a robot ?ag2)
    )
    :effect (and 
            (not (isAt ?x2 ?ag1 ?r2))
            (isAt ?x2 ?ag1 ?r1)
    );end_effect
)

(:action Tell_Alone
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 - id ?ag1 ?ag2 - agent ?r1 ?r2 - entity) 
    :precondition (and 
            (isAt ?x3 robot ?r1)
            (isStart ?x3)
            (isAt ?x4 ?ag1 ?r1)
            (isStart ?x4)
            (isAt ?x5 ?ag2 ?r2)
            (isStart ?x5)
            (Ignore ?x2 ?ag1 ?x1)

            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_r ?r1 ?r2)
    )
    :effect (and 
            (not(Ignore ?x2 ?ag1 ?x1))
            (isTold ?x2 ?ag1 ?x1)
    );end_effect
)

(:action Tell_Everybody
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 ?x8 - id ?ag1 ?ag2 - agent ?r - entity) 
    :precondition (and 
            (isAt ?x2 robot ?r)
            (isStart ?x2)
            (isAt ?x3 ?ag1 ?r)
            (isStart ?x3)
            (isAt ?x4 ?ag2 ?r)
            (isStart ?x4)
            (Ignore ?x5 ?ag1 ?x1)
            (Ignore ?x6 ?ag2 ?x1)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (free ?x7)
            (free ?x8)
            (disjuncted_id ?x7 ?x8)
    )
    :effect (and 
            (not(Ignore ?x5 ?ag1 ?x1))
            (not(Ignore ?x6 ?ag2 ?x1))
            (isTold ?x5 ?ag1 ?x1)
            (isTold ?x6 ?ag2 ?x1)
            (Know ?x7 ?ag1 ?x6)
            (Know ?x8 ?ag2 ?x5)
            (not (free ?x7))
            (not (free ?x8))
    );end_effect
)

(:action Tell_InFrontOf
    :parameters (?x1 ?x2 ?x3 ?x4 ?x6 ?x7 ?x8 - id ?ag1 ?ag2 - agent ?r - entity) 
    :precondition (and 
            (isAt ?x2 robot ?r)
            (isStart ?x2)
            (isAt ?x3 ?ag1 ?r)
            (isStart ?x3)
            (isAt ?x4 ?ag2 ?r)
            (isStart ?x4)
            (Ignore ?x6 ?ag1 ?x1)
            (Know ?x7 ?ag2 ?x1)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (free ?x8)
    )
    :effect (and 
            (not(Ignore ?x6 ?ag1 ?x1))
            (isTold ?x6 ?ag1 ?x1)
            (Know ?x8 ?ag2 ?x6)
            (not (free ?x8))
    );end_effect
)

(:action Insult_Alone
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag1 ?ag2 - agent ?r1 ?r2 - entity) 
    :precondition (and 
            (isAt ?x4 robot ?r1)
            (isStart ?x4)
            (isAt ?x5 ?ag1 ?r1)
            (isStart ?x5)
            (isAt ?x6 ?ag2 ?r2)
            (isStart ?x6)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_r ?r1 ?r2)
            (free ?x1)
            (free ?x2)
            (free ?x3)
            (disjuncted_id ?x1 ?x2)
            (disjuncted_id ?x2 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (insulted ?x1 ?ag1 robot)
            (Know ?x2 ?ag1 ?x1)
            (Ignore ?x3 ?ag2 ?x1)
            (isStart ?x1)
            (isStart ?x2)
            (isStart ?x3)
            (not(free ?x1))
            (not(free ?x2))
            (not(free ?x3))
    );end_effect
)

(:action Insult_InFrontOf
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag1 ?ag2 - agent ?r - entity) 
    :precondition (and 
            (isAt ?x4 robot ?r)
            (isStart ?x4)
            (isAt ?x5 ?ag1 ?r)
            (isStart ?x5)
            (isAt ?x6 ?ag2 ?r)
            (isStart ?x6)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (free ?x1)
            (free ?x2)
            (free ?x3)
            (disjuncted_id ?x1 ?x2)
            (disjuncted_id ?x2 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (insulted ?x1 ?ag1 robot)
            (isStart ?x1)
            (Know ?x2 ?ag1 ?x1)
            (isStart ?x2)
            (Know ?x3 ?ag2 ?x1)
            (isStart ?x3)
            (not(free ?x1))
            (not(free ?x2))
            (not(free ?x3))
    );end_effect
)

(:action Ask_Insult_Alone
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag1 ?ag2 - agent ?r1 ?r2 - entity) 
    :precondition (and 
            (isAt ?x4 robot ?r1)
            (isStart ?x4)
            (isAt ?x5 ?ag1 ?r1)
            (isStart ?x5)
            (isAt ?x6 ?ag2 ?r2)
            (isStart ?x6)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_r ?r1 ?r2)
            (free ?x1)
            (free ?x2)
            (free ?x3)
            (disjuncted_id ?x1 ?x2)
            (disjuncted_id ?x2 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (insulted ?x1 ?ag2 ?ag1)
            (isStart ?x1)
            (Know ?x2 ?ag1 ?x1)
            (isStart ?x2)
            (Ignore ?x3 ?ag2 ?x1)
            (isStart ?x3)
            (not(free ?x1))
            (not(free ?x2))
            (not(free ?x3))
    );end_effect
)

(:action Ask_Insult_InFrontOf
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag1 ?ag2 - agent ?r - entity) 
    :precondition (and 
            (isAt ?x4 robot ?r)
            (isStart ?x4)
            (isAt ?x5 ?ag1 ?r)
            (isStart ?x5)
            (isAt ?x6 ?ag2 ?r)
            (isStart ?x6)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (free ?x1)
            (free ?x2)
            (free ?x3)
            (disjuncted_id ?x1 ?x2)
            (disjuncted_id ?x2 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (insulted ?x1 ?ag2 ?ag1)
            (isStart ?x1)
            (Know ?x2 ?ag1 ?x1)
            (isStart ?x2)
            (Know ?x3 ?ag2 ?x1)
            (isStart ?x3)
            (not(free ?x1))
            (not(free ?x2))
            (not(free ?x3))
    );end_effect
)

(:action Praise_Alone
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag1 ?ag2 - agent ?r1 ?r2 - entity) 
    :precondition (and 
            (isAt ?x4 robot ?r1)
            (isStart ?x4)
            (isAt ?x5 ?ag1 ?r1)
            (isStart ?x5)
            (isAt ?x6 ?ag2 ?r2)
            (isStart ?x6)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_r ?r1 ?r2)
            (free ?x1)
            (free ?x2)
            (free ?x3)
            (disjuncted_id ?x1 ?x2)
            (disjuncted_id ?x2 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (praised ?x1 ?ag1 robot)
            (isStart ?x1)
            (Know ?x2 ?ag1 ?x1)
            (isStart ?x2)
            (Ignore ?x3 ?ag2 ?x1)
            (isStart ?x3)
            (not(free ?x1))
            (not(free ?x2))
            (not(free ?x3))
    );end_effect
)

(:action Praise_InFrontOf
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag1 ?ag2 - agent ?r - entity) 
    :precondition (and 
            (isAt ?x4 robot ?r)
            (isStart ?x4)
            (isAt ?x5 ?ag1 ?r)
            (isStart ?x5)
            (isAt ?x6 ?ag2 ?r)
            (isStart ?x6)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (free ?x1)
            (free ?x2)
            (free ?x3)
            (disjuncted_id ?x1 ?x2)
            (disjuncted_id ?x2 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (praised ?x1 ?ag1 robot)
            (isStart ?x1)
            (Know ?x2 ?ag1 ?x1)
            (isStart ?x2)
            (Know ?x3 ?ag2 ?x1)
            (isStart ?x3)
            (not(free ?x1))
            (not(free ?x2))
            (not(free ?x3))
    );end_effect
)

(:action Ask_Praise_Alone
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag1 ?ag2 - agent ?r1 ?r2 - entity) 
    :precondition (and 
            (isAt ?x4 robot ?r1)
            (isStart ?x4)
            (isAt ?x5 ?ag1 ?r1)
            (isStart ?x5)
            (isAt ?x6 ?ag2 ?r2)
            (isStart ?x6)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_r ?r1 ?r2)
            (free ?x1)
            (free ?x2)
            (free ?x3)
            (disjuncted_id ?x1 ?x2)
            (disjuncted_id ?x2 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (praised ?x1 ?ag2 ?ag1)
            (isStart ?x1)
            (Know ?x2 ?ag1 ?x1)
            (isStart ?x2)
            (Ignore ?x3 ?ag2 ?x1)
            (isStart ?x3)
            (not(free ?x1))
            (not(free ?x2))
            (not(free ?x3))
    );end_effect
)

(:action Ask_Praise_InFrontOf
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag1 ?ag2 - agent ?r - entity) 
    :precondition (and 
            (isAt ?x4 robot ?r)
            (isStart ?x4)
            (isAt ?x5 ?ag1 ?r)
            (isStart ?x5)
            (isAt ?x6 ?ag2 ?r)
            (isStart ?x6)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (free ?x1)
            (free ?x2)
            (free ?x3)
            (disjuncted_id ?x1 ?x2)
            (disjuncted_id ?x2 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (praised ?x1 ?ag2 ?ag1)
            (isStart ?x1)
            (Know ?x2 ?ag1 ?x1)
            (isStart ?x2)
            (Know ?x3 ?ag2 ?x1)
            (isStart ?x3)
            (not(free ?x1))
            (not(free ?x2))
            (not(free ?x3))
    );end_effect
)

(:action BlameFor_Alone
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 - id ?ag1 ?ag2 - agent ?r1 ?r2 - entity) 
    :precondition (and 
            (isAt ?x5 robot ?r1)
            (isStart ?x5)
            (isAt ?x6 ?ag1 ?r1)
            (isStart ?x6)
            (isAt ?x7 ?ag2 ?r2)
            (isStart ?x7)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_r ?r1 ?r2)
            (free ?x1)
            (free ?x3)
            (free ?x4)
            (disjuncted_id ?x1 ?x4)
            (disjuncted_id ?x4 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (blamed ?x1 ?ag1 ?x2 robot)
            (isStart ?x1)
            (Know ?x3 ?ag1 ?x1)
            (isStart ?x3)
            (Ignore ?x4 ?ag2 ?x1)
            (isStart ?x4)
            (not(free ?x1))
            (not(free ?x3))
            (not(free ?x4))
    );end_effect
)

(:action BlameFor_InFrontOf
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 - id ?ag1 ?ag2 - agent ?r - entity) 
    :precondition (and 
            (isAt ?x5 robot ?r)
            (isStart ?x5)
            (isAt ?x6 ?ag1 ?r)
            (isStart ?x6)
            (isAt ?x7 ?ag2 ?r)
            (isStart ?x7)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (free ?x1)
            (free ?x3)
            (free ?x4)
            (disjuncted_id ?x1 ?x4)
            (disjuncted_id ?x4 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (blamed ?x1 ?ag1 ?x2 robot)
            (isStart ?x1)
            (Know ?x3 ?ag1 ?x1)
            (isStart ?x3)
            (Know ?x4 ?ag2 ?x1)
            (isStart ?x4)
            (not(free ?x1))
            (not(free ?x3))
            (not(free ?x4))
    );end_effect
)

(:action Ask_BlameFor_Alone
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 - id ?ag1 ?ag2 - agent ?r1 ?r2 - entity) 
    :precondition (and 
            (isAt ?x5 robot ?r1)
            (isStart ?x5)
            (isAt ?x6 ?ag1 ?r2)
            (isStart ?x6)
            (isAt ?x7 ?ag2 ?r1)
            (isStart ?x7)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_r ?r1 ?r2)
            (free ?x1)
            (free ?x3)
            (free ?x4)
            (disjuncted_id ?x1 ?x4)
            (disjuncted_id ?x4 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (blamed ?x1 ?ag1 ?x2 ?ag2)
            (isStart ?x1)
            (Know ?x3 ?ag2 ?x1)
            (isStart ?x3)
            (Ignore ?x4 ?ag1 ?x1)
            (isStart ?x4)
            (not(free ?x1))
            (not(free ?x3))
            (not(free ?x4))
    );end_effect
)

(:action Ask_BlameFor_InFrontOf
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 - id ?ag1 ?ag2 - agent ?r - entity) 
    :precondition (and 
            (isAt ?x5 robot ?r)
            (isStart ?x5)
            (isAt ?x6 ?ag1 ?r)
            (isStart ?x6)
            (isAt ?x7 ?ag2 ?r)
            (isStart ?x7)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (free ?x1)
            (free ?x3)
            (free ?x4)
            (disjuncted_id ?x1 ?x4)
            (disjuncted_id ?x4 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (blamed ?x1 ?ag1 ?x2 ?ag2)
            (isStart ?x1)
            (Know ?x3 ?ag1 ?x1)
            (isStart ?x3)
            (Know ?x4 ?ag2 ?x1)
            (isStart ?x4)
            (not(free ?x1))
            (not(free ?x3))
            (not(free ?x4))
    );end_effect
)

(:action GiveCreditFor_Alone
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 - id ?ag1 ?ag2 - agent ?r1 ?r2 - entity) 
    :precondition (and 
            (isAt ?x5 robot ?r1)
            (isStart ?x5)
            (isAt ?x6 ?ag1 ?r1)
            (isStart ?x6)
            (isAt ?x7 ?ag2 ?r2)
            (isStart ?x7)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_r ?r1 ?r2)
            (free ?x1)
            (free ?x3)
            (free ?x4)
            (disjuncted_id ?x1 ?x4)
            (disjuncted_id ?x4 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (givenCredit ?x1 ?ag1 ?x2 robot)
            (isStart ?x1)
            (Know ?x3 ?ag1 ?x1)
            (isStart ?x3)
            (Ignore ?x4 ?ag2 ?x1)
            (isStart ?x4)
            (not(free ?x1))
            (not(free ?x3))
            (not(free ?x4))
    );end_effect
)

(:action GiveCreditFor_InFrontOf
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 - id ?ag1 ?ag2 - agent ?r - entity) 
    :precondition (and 
            (isAt ?x5 robot ?r)
            (isStart ?x5)
            (isAt ?x6 ?ag1 ?r)
            (isStart ?x6)
            (isAt ?x7 ?ag2 ?r)
            (isStart ?x7)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (free ?x1)
            (free ?x3)
            (free ?x4)
            (disjuncted_id ?x1 ?x4)
            (disjuncted_id ?x4 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (givenCredit ?x1 ?ag1 ?x2 robot)
            (isStart ?x1)
            (Know ?x3 ?ag1 ?x1)
            (isStart ?x3)
            (Know ?x4 ?ag2 ?x1)
            (isStart ?x4)
            (not(free ?x1))
            (not(free ?x3))
            (not(free ?x4))
    );end_effect
)

(:action Ask_GiveCreditFor_Alone
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 - id ?ag1 ?ag2 - agent ?r1 ?r2 - entity) 
    :precondition (and 
            (isAt ?x5 robot ?r1)
            (isStart ?x5)
            (isAt ?x6 ?ag1 ?r2)
            (isStart ?x6)
            (isAt ?x7 ?ag2 ?r1)
            (isStart ?x7)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (disjuncted_r ?r1 ?r2)
            (free ?x1)
            (free ?x3)
            (free ?x4)
            (disjuncted_id ?x1 ?x4)
            (disjuncted_id ?x4 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (givenCredit ?x1 ?ag1 ?x2 ?ag2)
            (isStart ?x1)
            (Ignore ?x3 ?ag1 ?x1)
            (isStart ?x3)
            (Know ?x4 ?ag2 ?x1)
            (isStart ?x4)
            (not(free ?x1))
            (not(free ?x3))
            (not(free ?x4))
    );end_effect
)

(:action Ask_GiveCreditFor_InFrontOf
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 ?x7 - id ?ag1 ?ag2 - agent ?r - entity) 
    :precondition (and 
            (isAt ?x5 robot ?r)
            (isStart ?x5)
            (isAt ?x6 ?ag1 ?r)
            (isStart ?x6)
            (isAt ?x7 ?ag2 ?r)
            (isStart ?x7)
            (disjuncted_a ?ag1 ?ag2)
            (disjuncted_a robot ?ag2)
            (disjuncted_a robot ?ag1)
            (free ?x1)
            (free ?x3)
            (free ?x4)
            (disjuncted_id ?x1 ?x4)
            (disjuncted_id ?x4 ?x3)
            (disjuncted_id ?x1 ?x3)
    )
    :effect (and 
            (givenCredit ?x1 ?ag1 ?x2 ?ag2)
            (isStart ?x1)
            (Know ?x3 ?ag1 ?x1)
            (isStart ?x3)
            (Know ?x4 ?ag2 ?x1)
            (isStart ?x4)
            (not(free ?x1))
            (not(free ?x3))
            (not(free ?x4))
    );end_effect
)


(:action test1
    :parameters (?x1 ?x2 ?x3 - id)
    :precondition (and 
        (Know ?x1 sally ?x2)
        (Ignore ?x3 anne ?x2)
        (isStart ?x2)
        (isStart ?x1)
        (isStart ?x3)
    )
    :effect (and 
        (ok1)
    );end_effect
)

(:action test2
    :parameters (?x1 ?x2 ?x3 - id)
    :precondition (and 
        (isIn ?x1 ball box1)
        (blamed ?x2 sally ?x1 robot)        
        (Ignore ?x3 anne ?x1)
        (isStart ?x2)
        (isStart ?x1)
        (isStart ?x3)
	)
    :effect (and 
        (ok2)
    );end_effect
)

(:action test3
    :parameters (?x1 ?x2 - id ?ag1 ?ag2 - agent)
    :precondition (and 
        (insulted ?x1 ?ag1 ?ag2)
        (IsTold ?x2 ?ag1 ?x1)
        (isStart ?x2)
        (isStart ?x1)
    )
    :effect (and 
        (ok3)
    );end_effect
)

(:action test4
    :parameters (?x1 ?x2 - id)
    :precondition (and 
        (isGrief_sadness_pensiveness ?x1 sally ?x2)
        (isStart ?x1)
        (forall(?x - id ?ag - agent)
           (and 
               (not (insulted ?x sally ?ag))
           )
        )
        (forall(?x - id ?ag - agent)
            (and 
                (not (insulted ?x anne ?ag))
            )
        )
        (forall(?x ?y - id ?ag - agent)
            (and 
                (not (blamed ?x sally ?y ?ag))
            )
        )
        (forall(?x ?y - id ?ag - agent)
            (and 
                (not (blamed ?x anne ?y ?ag))
            )
        )
    )
    :effect (and 
        (ok4)
    );end_effect
)

(:action test5
:parameters (?x1 ?x2 ?x3 ?x4 ?x5 - id)
:precondition (and 
	    (isIn ?x2 ball box1)
	    (isStart ?x2)
        (isEcstasy_joy_serenity ?x1 sally ?x2)
        (isEcstasy_joy_serenity ?x3 anne ?x2)
	    (isStart ?x1)
	    (isStart ?x3)
        (Ignore ?x4 sally ?x3)
        (Ignore ?x5 anne ?x1)
    )
    :effect (and 
        (ok5)
    );end_effect
)

(:action test6
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 ?x6 - id ?ag - agent)
    :precondition (and 
        (isGrief_sadness_pensiveness ?x1 anne ?x2)
        (isEcstasy_joy_serenity ?x3 sally ?x4)
	    (isStart ?x1)
	    (isStart ?x3)
        (insulted ?x5 anne ?ag)
        (isRage_anger_annoyance ?x6 sally ?x5)
	    (isStart ?x5)
	    (isStart ?x6)
    )
    :effect (and 
        (ok6)
    );end_effect
)

(:action test7
    :parameters (?x1 ?x2 - id ?ag - agent)
    :precondition (and 
        (insulted ?x1 anne ?ag)
	    (isStart ?x1)
        (isGrief_sadness_pensiveness ?x2 sally ?x1)
	    (isStart ?x2)
    )
    :effect (and 
        (ok7)
    );end_effect
)

(:action test8
    :parameters (?x1 ?x2 ?x3 ?x4 ?x5 - id ?ag1 ?ag2 - agent)
    :precondition (and 
            (isAt ?x1 ?ag1 elsewhere)
            (isAt ?x2 ?ag2 elsewhere)
            (isStart ?x1)
            (isStart ?x2)
            (disjuncted_a ?ag1 ?ag2)
            (isIn ?x3 ball box1)
            (isStart ?x3)
            (Know ?x4 ?ag1 ?x3)
            (isStart ?x4)
            (isTold ?x5 ?ag2 ?x3)
            (isStart ?x5)
    )
    :effect (and 
        (ok8)
    );end_effect
)

(:action test9
    :parameters (?x1 ?x2 ?x3 ?x4 - id ?ag2 - agent)
    :precondition (and 
            (isAt ?x1 sally elsewhere)
            (isStart ?x1)
            (isAt ?x2 ?ag2 elsewhere)
            (isStart ?x2)
            (disjuncted_a ?ag2 sally)
            (isGrief_sadness_pensiveness ?x3 sally ?x4)
            (isStart ?x3)
    )
    :effect (and 
        (ok9)
    );end_effect
)

(:action test10
    :parameters (?x1 ?x2 ?x3 ?x4 - id ?ag2 - agent)
    :precondition (and 
            (isAt ?x1 sally elsewhere)
            (isAt ?x2 ?ag2 elsewhere)
            (isStart ?x1)
            (isStart ?x2)
            (disjuncted_a ?ag2 sally)
            (isAmazement_surprise_distraction ?x3 sally ?x4)
            (isStart ?x3)
            (isStart ?x4)
            (forall(?x ?y - id ?ag - agent)
                (and
                    (not(blamed ?x ?ag2 ?y ?ag))
                )
            )
    )
    :effect (and 
        (ok10)
    );end_effect
)

)